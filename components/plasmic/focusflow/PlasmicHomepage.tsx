// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wj2qAuEBWxMEsUxpANdi1b
// Component: fnUkSM9xXbxs

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { RichCalendar } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-calendar";
import { calendarHelpers as RichCalendar_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-calendar";
import Button from "../../Button"; // plasmic-import: nQAzkSlk0HL0/component
import Modal from "../../Modal"; // plasmic-import: e0ng8ipOCA27/component
import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms";
import TextField from "../../TextField"; // plasmic-import: BesENwisZjRR/component
import RadioGroup from "../../RadioGroup"; // plasmic-import: 5EOwd79N6RNV/component
import Radio from "../../Radio"; // plasmic-import: trR-dZObjWEJ/component
import { AntdDropdown } from "@plasmicpkgs/antd5/skinny/registerDropdown";
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import CheckboxGroup from "../../CheckboxGroup"; // plasmic-import: 74X7Xnsr0LfR/component
import Checkbox from "../../Checkbox"; // plasmic-import: Fiwni9fctKpg/component
import Switch from "../../Switch"; // plasmic-import: pl-hfq6xTow5/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: wj2qAuEBWxMEsUxpANdi1b/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: fnUkSM9xXbxs/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: l0bNlwESE5TA/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: TKqMeq8uAQNz/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {
  darkMode: "darkMode";
};
export type PlasmicHomepage__VariantsArgs = {
  darkMode?: SingleBooleanChoiceArg<"darkMode">;
};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>(
  "darkMode"
);

export type PlasmicHomepage__ArgsType = {
  onDarkModeChange?: (val: any) => void;
};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>(
  "onDarkModeChange"
);

export type PlasmicHomepage__OverridesType = {
  lightMode?: Flex__<"div">;
  focusFlowTitle?: Flex__<"h1">;
  ownYourScheduleTagline?: Flex__<"h2">;
  calendar?: Flex__<typeof RichCalendar>;
  darkModeButton?: Flex__<typeof Button>;
  toggleMode?: Flex__<"div">;
  addTask1?: Flex__<typeof Modal>;
  addTaskButton?: Flex__<typeof Button>;
  addTaskLabel?: Flex__<"div">;
  editTask2?: Flex__<typeof Modal>;
  cmsDataFetcher?: Flex__<typeof CmsQueryRepeater>;
  continueButtonEditTask2?: Flex__<typeof Button>;
  addTaskBasicInfoTitleHolder?: Flex__<"div">;
  addTaskBasicInfoTitle?: Flex__<"h4">;
  addTaskContentHolder?: Flex__<"div">;
  basicInfoExplanation?: Flex__<"div">;
  h6?: Flex__<"h6">;
  addTaskNameInputTextField?: Flex__<typeof TextField>;
  addTaskRadioGroup?: Flex__<typeof RadioGroup>;
  addTaskFrequencySelection?: Flex__<"div">;
  onceTrigger?: Flex__<typeof Radio>;
  dailyTrigger?: Flex__<typeof Radio>;
  weeklyTrigger?: Flex__<typeof Radio>;
  monthlyTrigger?: Flex__<typeof Radio>;
  cancelAddTaskButton?: Flex__<typeof Button>;
  addTaskGoToNextButton?: Flex__<typeof Button>;
  addTask2?: Flex__<typeof Modal>;
  addTask2BodyHolder?: Flex__<"div">;
  addTask2BodyTextHolder?: Flex__<"div">;
  h5?: Flex__<"h5">;
  addTask2StartTimeSelectionHolder?: Flex__<"div">;
  timeHhDropdown?: Flex__<typeof AntdDropdown>;
  hourButton?: Flex__<typeof AntdButton>;
  timeMmDropdown?: Flex__<typeof AntdDropdown>;
  mmButton?: Flex__<typeof AntdButton>;
  amPmDropdown?: Flex__<typeof AntdDropdown>;
  addTask2EstimateHolder?: Flex__<"div">;
  timeEstimate?: Flex__<"div">;
  hhDropdown2?: Flex__<typeof AntdDropdown>;
  hourButton2?: Flex__<typeof AntdButton>;
  mmDropdown2?: Flex__<typeof AntdDropdown>;
  mmButton2?: Flex__<typeof AntdButton>;
  addTask2ButtonsHolder?: Flex__<"div">;
  addTask2CancelButton?: Flex__<typeof Button>;
  addTask2FinishButton?: Flex__<typeof Button>;
  editTask1?: Flex__<typeof Modal>;
  editTaskButton?: Flex__<typeof Button>;
  editTaskLabelHolder?: Flex__<"div">;
  h3?: Flex__<"h3">;
  editTaskInfoStacker?: Flex__<"div">;
  editTaskInfoHere?: Flex__<"div">;
  editTaskCheckboxGroup?: Flex__<typeof CheckboxGroup>;
  editTaskInfoChecksHolder?: Flex__<"div">;
  titleOption?: Flex__<typeof Checkbox>;
  startTimeOption?: Flex__<typeof Checkbox>;
  frequencyOption?: Flex__<typeof Checkbox>;
  estimatedTimeOption?: Flex__<typeof Checkbox>;
  editTaskCloseAndContinueButtons?: Flex__<"div">;
  editTaskCloseButton?: Flex__<typeof Button>;
  editTaskContinueButton?: Flex__<typeof Button>;
  deleteTaskButton?: Flex__<typeof Button>;
  deleteTaskText?: Flex__<"div">;
  premiumButton?: Flex__<typeof Button>;
  premiumModal?: Flex__<typeof Modal>;
  _switch?: Flex__<typeof Switch>;
  blockquote?: Flex__<"blockquote">;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "calendar.mode",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "month",

        onMutate: generateOnMutateForSpec("mode", RichCalendar_Helpers)
      },
      {
        path: "calendar.selectedDate",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedDate", RichCalendar_Helpers)
      },
      {
        path: "addTask1.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "addTaskNameInputTextField.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "addTaskRadioGroup.value",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "editTask1.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "taskSelection",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "SelectedTask"
      },
      {
        path: "estimatedHours",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "taskName",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "estimatedMinutes",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "startMinute",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "addTask2.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "startHour",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "morning",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "editTaskCheckboxGroup.value",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "titleOption.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "startTimeOption.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "frequencyOption.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "estimatedTimeOption.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "editTask2.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkedEditStates",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "showEstimateHolder",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "showStartTimeSelectionHolder",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "darkMode",
        type: "writable",
        variableType: "variant",

        valueProp: "darkMode",
        onChangeProp: "onDarkModeChange"
      },
      {
        path: "selectedDate",
        type: "private",
        variableType: "dateString",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "2025-01-16T12:57:35.154Z"
      },
      {
        path: "startDateTime",
        type: "private",
        variableType: "dateString",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                $state.startdatetime = new Date().toISOString();
                return ($state.LocalTaskListDB.ForTaskList.find(
                  item => item.id === "started?"
                ).value = true);
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "2025-01-16T14:02:47.177Z";
              }
              throw e;
            }
          })()
      },
      {
        path: "isPremium",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "premiumModal.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "_switch.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "autoEnabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />

        <link rel="canonical" href={PlasmicHomepage.pageMetadata.canonical} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"lightMode"}
        data-plasmic-override={overrides.lightMode}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.lightMode,
          {
            [sty.lightModedarkMode]: hasVariant($state, "darkMode", "darkMode")
          }
        )}
        onClick={async event => {
          const $steps = {};
        }}
      >
        <h1
          data-plasmic-name={"focusFlowTitle"}
          data-plasmic-override={overrides.focusFlowTitle}
          className={classNames(
            projectcss.all,
            projectcss.h1,
            projectcss.__wab_text,
            sty.focusFlowTitle,
            {
              [sty.focusFlowTitledarkMode]: hasVariant(
                $state,
                "darkMode",
                "darkMode"
              )
            }
          )}
        >
          {"FocusFlow"}
        </h1>
        <h2
          data-plasmic-name={"ownYourScheduleTagline"}
          data-plasmic-override={overrides.ownYourScheduleTagline}
          className={classNames(
            projectcss.all,
            projectcss.h2,
            projectcss.__wab_text,
            sty.ownYourScheduleTagline,
            {
              [sty.ownYourScheduleTaglinedarkMode]: hasVariant(
                $state,
                "darkMode",
                "darkMode"
              )
            }
          )}
        >
          {"Own Your Schedule"}
        </h2>
        {(() => {
          const child$Props = {
            className: classNames("__wab_instance", sty.calendar, {
              [sty.calendardarkMode]: hasVariant($state, "darkMode", "darkMode")
            }),
            mode: generateStateValueProp($state, ["calendar", "mode"]),
            onChange: async (...eventArgs: any) => {
              generateStateOnChangePropForCodeComponents(
                $state,
                "selectedDate",
                ["calendar", "selectedDate"],
                RichCalendar_Helpers
              ).apply(null, eventArgs);

              (async date => {
                const $steps = {};

                $steps["updateSelectedDate"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["selectedDate"]
                        },
                        operation: 0,
                        value: ($state.selectedDate = new Date().toISOString())
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSelectedDate"] != null &&
                  typeof $steps["updateSelectedDate"] === "object" &&
                  typeof $steps["updateSelectedDate"].then === "function"
                ) {
                  $steps["updateSelectedDate"] = await $steps[
                    "updateSelectedDate"
                  ];
                }

                $steps["refreshData"] = true
                  ? (() => {
                      const actionArgs = {};
                      return (async ({ queryInvalidation }) => {
                        if (!queryInvalidation) {
                          return;
                        }
                        await plasmicInvalidate(queryInvalidation);
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["refreshData"] != null &&
                  typeof $steps["refreshData"] === "object" &&
                  typeof $steps["refreshData"].then === "function"
                ) {
                  $steps["refreshData"] = await $steps["refreshData"];
                }
              }).apply(null, eventArgs);
            },
            onPanelChange: async (...eventArgs: any) => {
              generateStateOnChangePropForCodeComponents(
                $state,
                "mode",
                ["calendar", "mode"],
                RichCalendar_Helpers
              ).apply(null, eventArgs);
            },
            value: generateStateValueProp($state, ["calendar", "selectedDate"])
          };
          initializeCodeComponentStates(
            $state,
            [
              {
                name: "mode",
                plasmicStateName: "calendar.mode"
              },
              {
                name: "selectedDate",
                plasmicStateName: "calendar.selectedDate"
              }
            ],
            [],
            RichCalendar_Helpers ?? {},
            child$Props
          );

          return (
            <RichCalendar
              data-plasmic-name={"calendar"}
              data-plasmic-override={overrides.calendar}
              {...child$Props}
            />
          );
        })()}
        <Button
          data-plasmic-name={"darkModeButton"}
          data-plasmic-override={overrides.darkModeButton}
          className={classNames("__wab_instance", sty.darkModeButton, {
            [sty.darkModeButtondarkMode]: hasVariant(
              $state,
              "darkMode",
              "darkMode"
            )
          })}
          color={"muted"}
          label={
            <div
              data-plasmic-name={"toggleMode"}
              data-plasmic-override={overrides.toggleMode}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.toggleMode,
                {
                  [sty.toggleModedarkMode]: hasVariant(
                    $state,
                    "darkMode",
                    "darkMode"
                  )
                }
              )}
              onClick={async event => {
                const $steps = {};
              }}
            >
              {hasVariant($state, "darkMode", "darkMode")
                ? "Toggle\nMode"
                : "Toggle\nMode"}
            </div>
          }
          onClick={async event => {
            const $steps = {};

            $steps["updateDarkMode"] = true
              ? (() => {
                  const actionArgs = {
                    vgroup: "darkMode",
                    operation: 2,
                    value: "darkMode"
                  };
                  return (({ vgroup, value }) => {
                    if (typeof value === "string") {
                      value = [value];
                    }

                    const oldValue = $stateGet($state, vgroup);
                    $stateSet($state, vgroup, !oldValue);
                    return !oldValue;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateDarkMode"] != null &&
              typeof $steps["updateDarkMode"] === "object" &&
              typeof $steps["updateDarkMode"].then === "function"
            ) {
              $steps["updateDarkMode"] = await $steps["updateDarkMode"];
            }
          }}
          roundedFull={true}
          start={
            <CircleIcon
              className={classNames(projectcss.all, sty.svg__nsx0I)}
              role={"img"}
            />
          }
        />

        <div className={classNames(projectcss.all, sty.freeBox__rfgUj)} />

        <Modal
          data-plasmic-name={"addTask1"}
          data-plasmic-override={overrides.addTask1}
          className={classNames("__wab_instance", sty.addTask1, {
            [sty.addTask1darkMode]: hasVariant($state, "darkMode", "darkMode")
          })}
          closeOnBackdropClick={false}
          content={
            <Stack__
              as={"div"}
              data-plasmic-name={"addTaskContentHolder"}
              data-plasmic-override={overrides.addTaskContentHolder}
              hasGap={true}
              className={classNames(projectcss.all, sty.addTaskContentHolder, {
                [sty.addTaskContentHolderdarkMode]: hasVariant(
                  $state,
                  "darkMode",
                  "darkMode"
                )
              })}
            >
              <div
                data-plasmic-name={"basicInfoExplanation"}
                data-plasmic-override={overrides.basicInfoExplanation}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.basicInfoExplanation,
                  {
                    [sty.basicInfoExplanationdarkMode]: hasVariant(
                      $state,
                      "darkMode",
                      "darkMode"
                    )
                  }
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <h6
                      data-plasmic-name={"h6"}
                      data-plasmic-override={overrides.h6}
                      className={classNames(
                        projectcss.all,
                        projectcss.h6,
                        projectcss.__wab_text,
                        sty.h6,
                        {
                          [sty.h6darkMode]: hasVariant(
                            $state,
                            "darkMode",
                            "darkMode"
                          )
                        }
                      )}
                    >
                      {
                        "Input the Title and Frequency of your Task here, and you'll be redirected accordingly"
                      }
                    </h6>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>
              <TextField
                data-plasmic-name={"addTaskNameInputTextField"}
                data-plasmic-override={overrides.addTaskNameInputTextField}
                autoComplete={[]}
                className={classNames(
                  "__wab_instance",
                  sty.addTaskNameInputTextField,
                  {
                    [sty.addTaskNameInputTextFielddarkMode]: hasVariant(
                      $state,
                      "darkMode",
                      "darkMode"
                    )
                  }
                )}
                defaultValue={``}
                description={null}
                inputMode={"text"}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dtf18,
                      {
                        [sty.textdarkMode__dtf189HcnI]: hasVariant(
                          $state,
                          "darkMode",
                          "darkMode"
                        )
                      }
                    )}
                  >
                    {"Input Task Name Here:"}
                  </div>
                }
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "addTaskNameInputTextField",
                    "value"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }

                  (async val => {
                    const $steps = {};

                    $steps["updateTaskIsTask"] = $state
                      .addTaskNameInputTextField.value
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["taskName"]
                            },
                            operation: 4
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateTaskIsTask"] != null &&
                      typeof $steps["updateTaskIsTask"] === "object" &&
                      typeof $steps["updateTaskIsTask"].then === "function"
                    ) {
                      $steps["updateTaskIsTask"] = await $steps[
                        "updateTaskIsTask"
                      ];
                    }
                  }).apply(null, eventArgs);
                }}
                placeholder={``}
                showLabel={true}
              />

              <RadioGroup
                data-plasmic-name={"addTaskRadioGroup"}
                data-plasmic-override={overrides.addTaskRadioGroup}
                className={classNames("__wab_instance", sty.addTaskRadioGroup, {
                  [sty.addTaskRadioGroupdarkMode]: hasVariant(
                    $state,
                    "darkMode",
                    "darkMode"
                  )
                })}
                defaultValue={"Once"}
                description={null}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__f55Kt
                    )}
                  >
                    {"Pick one of the Following Frequencies:"}
                  </div>
                }
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "addTaskRadioGroup",
                    "value"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                options={
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"addTaskFrequencySelection"}
                    data-plasmic-override={overrides.addTaskFrequencySelection}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.addTaskFrequencySelection
                    )}
                  >
                    <Radio
                      data-plasmic-name={"onceTrigger"}
                      data-plasmic-override={overrides.onceTrigger}
                      className={classNames("__wab_instance", sty.onceTrigger)}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__q3L
                          )}
                        >
                          {"Once"}
                        </div>
                      }
                      value={"Once"}
                    />

                    <Radio
                      data-plasmic-name={"dailyTrigger"}
                      data-plasmic-override={overrides.dailyTrigger}
                      className={classNames("__wab_instance", sty.dailyTrigger)}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__uj6Mb
                          )}
                        >
                          {"Daily"}
                        </div>
                      }
                      value={"Daily"}
                    />

                    <Radio
                      data-plasmic-name={"weeklyTrigger"}
                      data-plasmic-override={overrides.weeklyTrigger}
                      className={classNames(
                        "__wab_instance",
                        sty.weeklyTrigger
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fUa2P
                          )}
                        >
                          {"Weekly"}
                        </div>
                      }
                      value={"Weekly"}
                    />

                    <Radio
                      data-plasmic-name={"monthlyTrigger"}
                      data-plasmic-override={overrides.monthlyTrigger}
                      className={classNames(
                        "__wab_instance",
                        sty.monthlyTrigger
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ddBk6
                          )}
                        >
                          {"Monthly"}
                        </div>
                      }
                      value={"Monthly"}
                    />
                  </Stack__>
                }
                showDescription={false}
              />
            </Stack__>
          }
          footer={
            <React.Fragment>
              <Button
                data-plasmic-name={"cancelAddTaskButton"}
                data-plasmic-override={overrides.cancelAddTaskButton}
                className={classNames(
                  "__wab_instance",
                  sty.cancelAddTaskButton
                )}
                color={"muted"}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4IgH
                    )}
                  >
                    {"Cancel"}
                  </div>
                }
                onClick={async event => {
                  const $steps = {};

                  $steps["updateAddTask10IsOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["addTask1", "isOpen"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateAddTask10IsOpen"] != null &&
                    typeof $steps["updateAddTask10IsOpen"] === "object" &&
                    typeof $steps["updateAddTask10IsOpen"].then === "function"
                  ) {
                    $steps["updateAddTask10IsOpen"] = await $steps[
                      "updateAddTask10IsOpen"
                    ];
                  }
                }}
              />

              <Button
                data-plasmic-name={"addTaskGoToNextButton"}
                data-plasmic-override={overrides.addTaskGoToNextButton}
                className={classNames(
                  "__wab_instance",
                  sty.addTaskGoToNextButton
                )}
                color={"success"}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zTxGw
                    )}
                  >
                    {"Submit"}
                  </div>
                }
                onClick={async event => {
                  const $steps = {};

                  $steps["updateAddTask1IsOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["addTask1", "isOpen"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateAddTask1IsOpen"] != null &&
                    typeof $steps["updateAddTask1IsOpen"] === "object" &&
                    typeof $steps["updateAddTask1IsOpen"].then === "function"
                  ) {
                    $steps["updateAddTask1IsOpen"] = await $steps[
                      "updateAddTask1IsOpen"
                    ];
                  }

                  $steps["updateAddTask2IsOpen"] = !(
                    $state.taskName || $state.addTaskRadioGroup.value === "Once"
                  )
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["addTask2", "isOpen"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateAddTask2IsOpen"] != null &&
                    typeof $steps["updateAddTask2IsOpen"] === "object" &&
                    typeof $steps["updateAddTask2IsOpen"].then === "function"
                  ) {
                    $steps["updateAddTask2IsOpen"] = await $steps[
                      "updateAddTask2IsOpen"
                    ];
                  }
                }}
                type={"soft"}
              />
            </React.Fragment>
          }
          heading={
            <div
              data-plasmic-name={"addTaskBasicInfoTitleHolder"}
              data-plasmic-override={overrides.addTaskBasicInfoTitleHolder}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.addTaskBasicInfoTitleHolder,
                {
                  [sty.addTaskBasicInfoTitleHolderdarkMode]: hasVariant(
                    $state,
                    "darkMode",
                    "darkMode"
                  )
                }
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                {
                  <h4
                    data-plasmic-name={"addTaskBasicInfoTitle"}
                    data-plasmic-override={overrides.addTaskBasicInfoTitle}
                    className={classNames(
                      projectcss.all,
                      projectcss.h4,
                      projectcss.__wab_text,
                      sty.addTaskBasicInfoTitle,
                      {
                        [sty.addTaskBasicInfoTitledarkMode]: hasVariant(
                          $state,
                          "darkMode",
                          "darkMode"
                        )
                      }
                    )}
                  >
                    {"Create Your Task: Basic Info"}
                  </h4>
                }
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </div>
          }
          isOpen={generateStateValueProp($state, ["addTask1", "isOpen"])}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["addTask1", "isOpen"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          trigger={
            <Button
              data-plasmic-name={"addTaskButton"}
              data-plasmic-override={overrides.addTaskButton}
              className={classNames("__wab_instance", sty.addTaskButton, {
                [sty.addTaskButtondarkMode]: hasVariant(
                  $state,
                  "darkMode",
                  "darkMode"
                )
              })}
              label={
                <div
                  className={classNames(projectcss.all, sty.freeBox___0Mu5P)}
                >
                  <div
                    data-plasmic-name={"addTaskLabel"}
                    data-plasmic-override={overrides.addTaskLabel}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.addTaskLabel,
                      {
                        [sty.addTaskLabeldarkMode]: hasVariant(
                          $state,
                          "darkMode",
                          "darkMode"
                        )
                      }
                    )}
                  >
                    {"Add\nTask"}
                  </div>
                  <Modal
                    data-plasmic-name={"editTask2"}
                    data-plasmic-override={overrides.editTask2}
                    className={classNames("__wab_instance", sty.editTask2, {
                      [sty.editTask2darkMode]: hasVariant(
                        $state,
                        "darkMode",
                        "darkMode"
                      )
                    })}
                    content={
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___3HtuU
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dwvEq
                          )}
                        >
                          {"Change the parts of your task you'd like!"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ygcwe
                          )}
                        >
                          {
                            "You can put anything here!\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
                          }
                        </div>
                      </Stack__>
                    }
                    footer={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ykX7T
                        )}
                      >
                        <Button
                          data-plasmic-name={"continueButtonEditTask2"}
                          data-plasmic-override={
                            overrides.continueButtonEditTask2
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.continueButtonEditTask2
                          )}
                          color={"success"}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__dPIr9
                              )}
                            >
                              {"Continue"}
                            </div>
                          }
                          type={"soft"}
                        />

                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__o7EfQ
                          )}
                          color={"muted"}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__oyf2P
                              )}
                            >
                              {"Close"}
                            </div>
                          }
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateAriaDialogTriggerIsOpen"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: [
                                        "ariaDialogTrigger",
                                        "isOpen"
                                      ]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateAriaDialogTriggerIsOpen"] != null &&
                              typeof $steps["updateAriaDialogTriggerIsOpen"] ===
                                "object" &&
                              typeof $steps["updateAriaDialogTriggerIsOpen"]
                                .then === "function"
                            ) {
                              $steps["updateAriaDialogTriggerIsOpen"] =
                                await $steps["updateAriaDialogTriggerIsOpen"];
                            }
                          }}
                          type={"soft"}
                        />
                      </div>
                    }
                    heading={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qlPPl
                        )}
                      >
                        {"Edit Task Part 2"}
                      </div>
                    }
                    isOpen={generateStateValueProp($state, [
                      "editTask2",
                      "isOpen"
                    ])}
                    onOpenChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "editTask2",
                        "isOpen"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    trigger={
                      <CmsQueryRepeater
                        data-plasmic-name={"cmsDataFetcher"}
                        data-plasmic-override={overrides.cmsDataFetcher}
                        children={null}
                        className={classNames(
                          "__wab_instance",
                          sty.cmsDataFetcher
                        )}
                        desc={true}
                        emptyMessage={
                          <DataCtxReader__>
                            {$ctx => (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ciJ
                                )}
                              >
                                {"No matching published entries found."}
                              </div>
                            )}
                          </DataCtxReader__>
                        }
                        forceEmptyState={false}
                        forceLoadingState={false}
                        limit={0}
                        loadingMessage={
                          <DataCtxReader__>
                            {$ctx => (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___1RvSt
                                )}
                              >
                                {"Loading..."}
                              </div>
                            )}
                          </DataCtxReader__>
                        }
                        mode={"rows"}
                        noAutoRepeat={false}
                        noLayout={false}
                        orderBy={"startTime"}
                        table={"localStorageDb"}
                        useDraft={false}
                      />
                    }
                  />
                </div>
              }
              onClick={async event => {
                const $steps = {};

                $steps["updateCalendarMode"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["calendar", "mode"]
                        },
                        operation: 0
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateCalendarMode"] != null &&
                  typeof $steps["updateCalendarMode"] === "object" &&
                  typeof $steps["updateCalendarMode"].then === "function"
                ) {
                  $steps["updateCalendarMode"] = await $steps[
                    "updateCalendarMode"
                  ];
                }
              }}
              roundedFull={true}
              start={
                <CircleIcon
                  className={classNames(projectcss.all, sty.svg__aXgH7)}
                  role={"img"}
                />
              }
            />
          }
        />

        <Modal
          data-plasmic-name={"addTask2"}
          data-plasmic-override={overrides.addTask2}
          className={classNames("__wab_instance", sty.addTask2, {
            [sty.addTask2darkMode]: hasVariant($state, "darkMode", "darkMode")
          })}
          closeOnBackdropClick={false}
          content={
            <Stack__
              as={"div"}
              data-plasmic-name={"addTask2BodyHolder"}
              data-plasmic-override={overrides.addTask2BodyHolder}
              hasGap={true}
              className={classNames(projectcss.all, sty.addTask2BodyHolder, {
                [sty.addTask2BodyHolderdarkMode]: hasVariant(
                  $state,
                  "darkMode",
                  "darkMode"
                )
              })}
            >
              <div
                data-plasmic-name={"addTask2BodyTextHolder"}
                data-plasmic-override={overrides.addTask2BodyTextHolder}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.addTask2BodyTextHolder,
                  {
                    [sty.addTask2BodyTextHolderdarkMode]: hasVariant(
                      $state,
                      "darkMode",
                      "darkMode"
                    )
                  }
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <h5
                      data-plasmic-name={"h5"}
                      data-plasmic-override={overrides.h5}
                      className={classNames(
                        projectcss.all,
                        projectcss.h5,
                        projectcss.__wab_text,
                        sty.h5,
                        {
                          [sty.h5darkMode]: hasVariant(
                            $state,
                            "darkMode",
                            "darkMode"
                          )
                        }
                      )}
                    >
                      {
                        "Don't worry, you only have to do this once for new tasks!"
                      }
                    </h5>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>
              {(() => {
                try {
                  return $state.showStartTimeSelectionHolder;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <div
                  data-plasmic-name={"addTask2StartTimeSelectionHolder"}
                  data-plasmic-override={
                    overrides.addTask2StartTimeSelectionHolder
                  }
                  className={classNames(
                    projectcss.all,
                    sty.addTask2StartTimeSelectionHolder,
                    {
                      [sty.addTask2StartTimeSelectionHolderdarkMode]:
                        hasVariant($state, "darkMode", "darkMode")
                    }
                  )}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xJi8I,
                      {
                        [sty.textdarkMode__xJi8I9HcnI]: hasVariant(
                          $state,
                          "darkMode",
                          "darkMode"
                        )
                      }
                    )}
                  >
                    {"Start Time:"}
                  </div>
                  <AntdDropdown
                    data-plasmic-name={"timeHhDropdown"}
                    data-plasmic-override={overrides.timeHhDropdown}
                    className={classNames("__wab_instance", sty.timeHhDropdown)}
                    dropdownMenuScopeClassName={
                      sty["timeHhDropdown__dropdownMenu"]
                    }
                    menuClassName={classNames({
                      [sty["pcls_bvrglo98eD8t"]]: true
                    })}
                    menuItems={() => (
                      <React.Fragment>
                        <AntdMenuItem
                          className={classNames(
                            "__wab_instance",
                            sty.menuItem__jbSKd
                          )}
                          key={"menu-item-1"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nGg2
                            )}
                          >
                            {"Menu item"}
                          </div>
                        </AntdMenuItem>
                        <AntdMenuItem
                          className={classNames(
                            "__wab_instance",
                            sty.menuItem__w3NtS
                          )}
                          key={"menu-item-2"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__cZKn2
                            )}
                          >
                            {"Menu item"}
                          </div>
                        </AntdMenuItem>
                      </React.Fragment>
                    )}
                    menuItemsJson={(() => {
                      const __composite = [
                        { type: "item", value: "action1", label: null },
                        { type: "item", value: "action2", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: null, label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null }
                      ];
                      __composite["0"]["label"] = "1";
                      __composite["1"]["label"] = "2";
                      __composite["2"]["label"] = "3";
                      __composite["3"]["label"] = "4";
                      __composite["4"]["type"] = "item";
                      __composite["4"]["label"] = "5";
                      __composite["5"]["label"] = "6";
                      __composite["6"]["label"] = "7";
                      __composite["7"]["label"] = "8";
                      __composite["8"]["label"] = "9";
                      __composite["9"]["label"] = "10";
                      __composite["10"]["label"] = "11";
                      __composite["11"]["label"] = "12";
                      return __composite;
                    })()}
                    trigger={"hover"}
                  >
                    <AntdButton
                      data-plasmic-name={"hourButton"}
                      data-plasmic-override={overrides.hourButton}
                      className={classNames("__wab_instance", sty.hourButton)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__i1Dm0
                        )}
                      >
                        {"Hour"}
                      </div>
                    </AntdButton>
                  </AntdDropdown>
                  <AntdDropdown
                    data-plasmic-name={"timeMmDropdown"}
                    data-plasmic-override={overrides.timeMmDropdown}
                    className={classNames("__wab_instance", sty.timeMmDropdown)}
                    dropdownMenuScopeClassName={
                      sty["timeMmDropdown__dropdownMenu"]
                    }
                    menuItems={() => (
                      <React.Fragment>
                        <AntdMenuItem
                          className={classNames(
                            "__wab_instance",
                            sty.menuItem__s10Ct
                          )}
                          key={"menu-item-1"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__imqvz
                            )}
                          >
                            {"Menu item"}
                          </div>
                        </AntdMenuItem>
                        <AntdMenuItem
                          className={classNames(
                            "__wab_instance",
                            sty.menuItem__uruG5
                          )}
                          key={"menu-item-2"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__fGvcp
                            )}
                          >
                            {"Menu item"}
                          </div>
                        </AntdMenuItem>
                      </React.Fragment>
                    )}
                    menuItemsJson={(() => {
                      const __composite = [
                        { type: "item", label: null },
                        { type: "item", value: "action1", label: null },
                        { type: "item", value: "action2", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null }
                      ];
                      __composite["0"]["label"] = "00";
                      __composite["1"]["label"] = "01";
                      __composite["2"]["label"] = "02";
                      __composite["3"]["label"] = "03";
                      __composite["4"]["label"] = "04";
                      __composite["5"]["label"] = "05";
                      __composite["6"]["label"] = "06";
                      __composite["7"]["label"] = "07";
                      __composite["8"]["label"] = "08";
                      __composite["9"]["label"] = "09";
                      __composite["10"]["label"] = "10";
                      __composite["11"]["label"] = "11";
                      __composite["12"]["label"] = "12";
                      __composite["13"]["label"] = "13";
                      __composite["14"]["label"] = "14";
                      __composite["15"]["label"] = "15";
                      __composite["16"]["label"] = "16";
                      __composite["17"]["label"] = "17";
                      __composite["18"]["label"] = "18";
                      __composite["19"]["label"] = "19";
                      __composite["20"]["label"] = "20";
                      __composite["21"]["label"] = "21";
                      __composite["22"]["label"] = "22";
                      __composite["23"]["label"] = "23";
                      __composite["24"]["label"] = "24";
                      __composite["25"]["label"] = "25";
                      __composite["26"]["label"] = "26";
                      __composite["27"]["label"] = "27";
                      __composite["28"]["label"] = "28";
                      __composite["29"]["label"] = "29";
                      __composite["30"]["label"] = "30";
                      __composite["31"]["label"] = "31";
                      __composite["32"]["label"] = "32";
                      __composite["33"]["label"] = "33";
                      __composite["34"]["label"] = "34";
                      __composite["35"]["label"] = "35";
                      __composite["36"]["label"] = "36";
                      __composite["37"]["label"] = "37";
                      __composite["38"]["label"] = "38";
                      __composite["39"]["label"] = "39";
                      __composite["40"]["label"] = "40";
                      __composite["41"]["label"] = "41";
                      __composite["42"]["label"] = "42";
                      __composite["43"]["label"] = "43";
                      __composite["44"]["label"] = "44";
                      __composite["45"]["label"] = "45";
                      __composite["46"]["label"] = "46";
                      __composite["47"]["label"] = "47";
                      __composite["48"]["label"] = "48";
                      __composite["49"]["label"] = "49";
                      __composite["50"]["label"] = "50";
                      __composite["51"]["label"] = "51";
                      __composite["52"]["label"] = "52";
                      __composite["53"]["label"] = "53";
                      __composite["54"]["label"] = "54";
                      __composite["55"]["label"] = "55";
                      __composite["56"]["label"] = "56";
                      __composite["57"]["label"] = "57";
                      __composite["58"]["label"] = "58";
                      __composite["59"]["label"] = "59";
                      return __composite;
                    })()}
                    onAction={async key => {
                      const $steps = {};
                    }}
                    trigger={"hover"}
                  >
                    <AntdButton
                      data-plasmic-name={"mmButton"}
                      data-plasmic-override={overrides.mmButton}
                      className={classNames("__wab_instance", sty.mmButton)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tyohM
                        )}
                      >
                        {"Minute"}
                      </div>
                    </AntdButton>
                  </AntdDropdown>
                  <AntdDropdown
                    data-plasmic-name={"amPmDropdown"}
                    data-plasmic-override={overrides.amPmDropdown}
                    className={classNames("__wab_instance", sty.amPmDropdown)}
                    dropdownMenuScopeClassName={
                      sty["amPmDropdown__dropdownMenu"]
                    }
                    menuItems={() => (
                      <React.Fragment>
                        <AntdMenuItem
                          className={classNames(
                            "__wab_instance",
                            sty.menuItem__sY9P
                          )}
                          key={"menu-item-1"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__kveUm
                            )}
                          >
                            {"Menu item"}
                          </div>
                        </AntdMenuItem>
                        <AntdMenuItem
                          className={classNames(
                            "__wab_instance",
                            sty.menuItem__kcPzU
                          )}
                          key={"menu-item-2"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___1DKgm
                            )}
                          >
                            {"Menu item"}
                          </div>
                        </AntdMenuItem>
                      </React.Fragment>
                    )}
                    menuItemsJson={(() => {
                      const __composite = [
                        { type: "item", value: "action1", label: null },
                        { type: "item", value: "action2", label: null }
                      ];
                      __composite["0"]["label"] = "AM";
                      __composite["1"]["label"] = "PM";
                      return __composite;
                    })()}
                    onAction={async key => {
                      const $steps = {};

                      $steps["updateStateVariable"] = true
                        ? (() => {
                            const actionArgs = { operation: 0 };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateStateVariable"] != null &&
                        typeof $steps["updateStateVariable"] === "object" &&
                        typeof $steps["updateStateVariable"].then === "function"
                      ) {
                        $steps["updateStateVariable"] = await $steps[
                          "updateStateVariable"
                        ];
                      }
                    }}
                    trigger={"hover"}
                  >
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__ovVsj
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hhTOf
                        )}
                      >
                        {"AM/PM"}
                      </div>
                    </AntdButton>
                  </AntdDropdown>
                </div>
              ) : null}
              {(() => {
                try {
                  return $state.showEstimateHolder;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <div
                  data-plasmic-name={"addTask2EstimateHolder"}
                  data-plasmic-override={overrides.addTask2EstimateHolder}
                  className={classNames(
                    projectcss.all,
                    sty.addTask2EstimateHolder,
                    {
                      [sty.addTask2EstimateHolderdarkMode]: hasVariant(
                        $state,
                        "darkMode",
                        "darkMode"
                      )
                    }
                  )}
                >
                  <div
                    data-plasmic-name={"timeEstimate"}
                    data-plasmic-override={overrides.timeEstimate}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.timeEstimate,
                      {
                        [sty.timeEstimatedarkMode]: hasVariant(
                          $state,
                          "darkMode",
                          "darkMode"
                        )
                      }
                    )}
                  >
                    {"Time Estimate:"}
                  </div>
                  <AntdDropdown
                    data-plasmic-name={"hhDropdown2"}
                    data-plasmic-override={overrides.hhDropdown2}
                    className={classNames("__wab_instance", sty.hhDropdown2)}
                    dropdownMenuScopeClassName={
                      sty["hhDropdown2__dropdownMenu"]
                    }
                    menuClassName={classNames({
                      [sty["pcls_nhdsZa7RUMLe"]]: true
                    })}
                    menuItems={() => (
                      <React.Fragment>
                        <AntdMenuItem
                          className={classNames(
                            "__wab_instance",
                            sty.menuItem__kgnfi
                          )}
                          key={"menu-item-1"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__kceJ9
                            )}
                          >
                            {"Menu item"}
                          </div>
                        </AntdMenuItem>
                        <AntdMenuItem
                          className={classNames(
                            "__wab_instance",
                            sty.menuItem__uFmW
                          )}
                          key={"menu-item-2"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__e4Ym5
                            )}
                          >
                            {"Menu item"}
                          </div>
                        </AntdMenuItem>
                      </React.Fragment>
                    )}
                    menuItemsJson={(() => {
                      const __composite = [
                        { type: "item", value: "action1", label: null },
                        { type: "item", value: "action2", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: null, label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null }
                      ];
                      __composite["0"]["label"] = "1";
                      __composite["1"]["label"] = "2";
                      __composite["2"]["label"] = "3";
                      __composite["3"]["label"] = "4";
                      __composite["4"]["type"] = "item";
                      __composite["4"]["label"] = "5";
                      __composite["5"]["label"] = "6";
                      __composite["6"]["label"] = "7";
                      __composite["7"]["label"] = "8";
                      __composite["8"]["label"] = "9";
                      __composite["9"]["label"] = "10";
                      __composite["10"]["label"] = "11";
                      __composite["11"]["label"] = "12";
                      return __composite;
                    })()}
                    onAction={async key => {
                      const $steps = {};
                    }}
                    trigger={"hover"}
                  >
                    <AntdButton
                      data-plasmic-name={"hourButton2"}
                      data-plasmic-override={overrides.hourButton2}
                      className={classNames("__wab_instance", sty.hourButton2)}
                      onClick={async () => {
                        const $steps = {};
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__oPsrB
                        )}
                      >
                        {"Hour"}
                      </div>
                    </AntdButton>
                  </AntdDropdown>
                  <AntdDropdown
                    data-plasmic-name={"mmDropdown2"}
                    data-plasmic-override={overrides.mmDropdown2}
                    className={classNames("__wab_instance", sty.mmDropdown2)}
                    disabled={false}
                    dropdownMenuScopeClassName={
                      sty["mmDropdown2__dropdownMenu"]
                    }
                    menuItems={() => (
                      <React.Fragment>
                        <AntdMenuItem
                          className={classNames(
                            "__wab_instance",
                            sty.menuItem__tpCmC
                          )}
                          key={"menu-item-1"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__i8Vju
                            )}
                          >
                            {"Menu item"}
                          </div>
                        </AntdMenuItem>
                        <AntdMenuItem
                          className={classNames(
                            "__wab_instance",
                            sty.menuItem___2Mmjc
                          )}
                          key={"menu-item-2"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___1TdZj
                            )}
                          >
                            {"Menu item"}
                          </div>
                        </AntdMenuItem>
                      </React.Fragment>
                    )}
                    menuItemsJson={(() => {
                      const __composite = [
                        { type: "item", label: null },
                        { type: "item", value: "action1", label: null },
                        { type: "item", value: "action2", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null },
                        { type: "item", label: null }
                      ];
                      __composite["0"]["label"] = "00";
                      __composite["1"]["label"] = "01";
                      __composite["2"]["label"] = "02";
                      __composite["3"]["label"] = "03";
                      __composite["4"]["label"] = "04";
                      __composite["5"]["label"] = "05";
                      __composite["6"]["label"] = "06";
                      __composite["7"]["label"] = "07";
                      __composite["8"]["label"] = "08";
                      __composite["9"]["label"] = "09";
                      __composite["10"]["label"] = "10";
                      __composite["11"]["label"] = "11";
                      __composite["12"]["label"] = "12";
                      __composite["13"]["label"] = "13";
                      __composite["14"]["label"] = "14";
                      __composite["15"]["label"] = "15";
                      __composite["16"]["label"] = "16";
                      __composite["17"]["label"] = "17";
                      __composite["18"]["label"] = "18";
                      __composite["19"]["label"] = "19";
                      __composite["20"]["label"] = "20";
                      __composite["21"]["label"] = "21";
                      __composite["22"]["label"] = "22";
                      __composite["23"]["label"] = "23";
                      __composite["24"]["label"] = "24";
                      __composite["25"]["label"] = "25";
                      __composite["26"]["label"] = "26";
                      __composite["27"]["label"] = "27";
                      __composite["28"]["label"] = "28";
                      __composite["29"]["label"] = "29";
                      __composite["30"]["label"] = "30";
                      __composite["31"]["label"] = "31";
                      __composite["32"]["label"] = "32";
                      __composite["33"]["label"] = "33";
                      __composite["34"]["label"] = "34";
                      __composite["35"]["label"] = "35";
                      __composite["36"]["label"] = "36";
                      __composite["37"]["label"] = "37";
                      __composite["38"]["label"] = "38";
                      __composite["39"]["label"] = "39";
                      __composite["40"]["label"] = "40";
                      __composite["41"]["label"] = "41";
                      __composite["42"]["label"] = "42";
                      __composite["43"]["label"] = "43";
                      __composite["44"]["label"] = "44";
                      __composite["45"]["label"] = "45";
                      __composite["46"]["label"] = "46";
                      __composite["47"]["label"] = "47";
                      __composite["48"]["label"] = "48";
                      __composite["49"]["label"] = "49";
                      __composite["50"]["label"] = "50";
                      __composite["51"]["label"] = "51";
                      __composite["52"]["label"] = "52";
                      __composite["53"]["label"] = "53";
                      __composite["54"]["label"] = "54";
                      __composite["55"]["label"] = "55";
                      __composite["56"]["label"] = "56";
                      __composite["57"]["label"] = "57";
                      __composite["58"]["label"] = "58";
                      __composite["59"]["label"] = "59";
                      return __composite;
                    })()}
                    onAction={async key => {
                      const $steps = {};
                    }}
                    trigger={"hover"}
                  >
                    <AntdButton
                      data-plasmic-name={"mmButton2"}
                      data-plasmic-override={overrides.mmButton2}
                      className={classNames("__wab_instance", sty.mmButton2)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__y7Jlw
                        )}
                      >
                        {"Minute"}
                      </div>
                    </AntdButton>
                  </AntdDropdown>
                </div>
              ) : null}
            </Stack__>
          }
          footer={
            <div
              data-plasmic-name={"addTask2ButtonsHolder"}
              data-plasmic-override={overrides.addTask2ButtonsHolder}
              className={classNames(projectcss.all, sty.addTask2ButtonsHolder, {
                [sty.addTask2ButtonsHolderdarkMode]: hasVariant(
                  $state,
                  "darkMode",
                  "darkMode"
                )
              })}
            >
              <Button
                data-plasmic-name={"addTask2CancelButton"}
                data-plasmic-override={overrides.addTask2CancelButton}
                className={classNames(
                  "__wab_instance",
                  sty.addTask2CancelButton,
                  {
                    [sty.addTask2CancelButtondarkMode]: hasVariant(
                      $state,
                      "darkMode",
                      "darkMode"
                    )
                  }
                )}
                color={"muted"}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lrmix,
                      {
                        [sty.textdarkMode__lrmix9HcnI]: hasVariant(
                          $state,
                          "darkMode",
                          "darkMode"
                        )
                      }
                    )}
                  >
                    {"Cancel"}
                  </div>
                }
                onClick={async event => {
                  const $steps = {};

                  $steps["updateAddTask12IsOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["addTask2", "isOpen"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateAddTask12IsOpen"] != null &&
                    typeof $steps["updateAddTask12IsOpen"] === "object" &&
                    typeof $steps["updateAddTask12IsOpen"].then === "function"
                  ) {
                    $steps["updateAddTask12IsOpen"] = await $steps[
                      "updateAddTask12IsOpen"
                    ];
                  }
                }}
              />

              <Button
                data-plasmic-name={"addTask2FinishButton"}
                data-plasmic-override={overrides.addTask2FinishButton}
                className={classNames(
                  "__wab_instance",
                  sty.addTask2FinishButton
                )}
                color={"success"}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___6YJa
                    )}
                  >
                    {"Finish"}
                  </div>
                }
                onClick={async event => {
                  const $steps = {};
                }}
                type={"soft"}
              />
            </div>
          }
          heading={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__egXvl,
                {
                  [sty.textdarkMode__egXvl9HcnI]: hasVariant(
                    $state,
                    "darkMode",
                    "darkMode"
                  )
                }
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                {
                  <h4
                    className={classNames(
                      projectcss.all,
                      projectcss.h4,
                      projectcss.__wab_text,
                      sty.h4__ihh5I,
                      {
                        [sty.h4darkMode__ihh5I9HcnI]: hasVariant(
                          $state,
                          "darkMode",
                          "darkMode"
                        )
                      }
                    )}
                  >
                    {"Create Your Task: Estimate Your Start Time and Length"}
                  </h4>
                }
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </div>
          }
          isOpen={generateStateValueProp($state, ["addTask2", "isOpen"])}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["addTask2", "isOpen"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          trigger={null}
        />

        <Modal
          data-plasmic-name={"editTask1"}
          data-plasmic-override={overrides.editTask1}
          className={classNames("__wab_instance", sty.editTask1, {
            [sty.editTask1darkMode]: hasVariant($state, "darkMode", "darkMode")
          })}
          closeOnBackdropClick={false}
          content={
            <React.Fragment>
              <Stack__
                as={"div"}
                data-plasmic-name={"editTaskInfoStacker"}
                data-plasmic-override={overrides.editTaskInfoStacker}
                hasGap={true}
                className={classNames(projectcss.all, sty.editTaskInfoStacker, {
                  [sty.editTaskInfoStackerdarkMode]: hasVariant(
                    $state,
                    "darkMode",
                    "darkMode"
                  )
                })}
              >
                <div
                  data-plasmic-name={"editTaskInfoHere"}
                  data-plasmic-override={overrides.editTaskInfoHere}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.editTaskInfoHere,
                    {
                      [sty.editTaskInfoHeredarkMode]: hasVariant(
                        $state,
                        "darkMode",
                        "darkMode"
                      )
                    }
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    {
                      <h4
                        className={classNames(
                          projectcss.all,
                          projectcss.h4,
                          projectcss.__wab_text,
                          sty.h4__hamgt,
                          {
                            [sty.h4darkMode__hamgt9HcnI]: hasVariant(
                              $state,
                              "darkMode",
                              "darkMode"
                            )
                          }
                        )}
                      >
                        {"Choose what info to change:"}
                      </h4>
                    }
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </div>
              </Stack__>
              <CheckboxGroup
                data-plasmic-name={"editTaskCheckboxGroup"}
                data-plasmic-override={overrides.editTaskCheckboxGroup}
                className={classNames(
                  "__wab_instance",
                  sty.editTaskCheckboxGroup,
                  {
                    [sty.editTaskCheckboxGroupdarkMode]: hasVariant(
                      $state,
                      "darkMode",
                      "darkMode"
                    )
                  }
                )}
                description={null}
                disabled={false}
                label={null}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "editTaskCheckboxGroup",
                    "value"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }

                  (async val => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                const [checkedStates, setCheckedStates] =
                                  React.useState({
                                    title: false,
                                    startTime: false,
                                    frequency: false,
                                    estimatedTime: false
                                  });
                                const handleCheckboxChange = key => event => {
                                  setCheckedStates(prev => ({
                                    ...prev,
                                    [key]: event.target.checked
                                  }));
                                };
                                return handleCheckboxChange;
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }).apply(null, eventArgs);
                }}
                options={
                  <div
                    data-plasmic-name={"editTaskInfoChecksHolder"}
                    data-plasmic-override={overrides.editTaskInfoChecksHolder}
                    className={classNames(
                      projectcss.all,
                      sty.editTaskInfoChecksHolder,
                      {
                        [sty.editTaskInfoChecksHolderdarkMode]: hasVariant(
                          $state,
                          "darkMode",
                          "darkMode"
                        )
                      }
                    )}
                  >
                    <Checkbox
                      data-plasmic-name={"titleOption"}
                      data-plasmic-override={overrides.titleOption}
                      className={classNames("__wab_instance", sty.titleOption, {
                        [sty.titleOptiondarkMode]: hasVariant(
                          $state,
                          "darkMode",
                          "darkMode"
                        )
                      })}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__rc0Lp,
                            {
                              [sty.textdarkMode__rc0Lp9HcnI]: hasVariant(
                                $state,
                                "darkMode",
                                "darkMode"
                              )
                            }
                          )}
                        >
                          {"Title"}
                        </div>
                      }
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "titleOption",
                          "isSelected"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      value={"option1"}
                    />

                    <Checkbox
                      data-plasmic-name={"startTimeOption"}
                      data-plasmic-override={overrides.startTimeOption}
                      className={classNames(
                        "__wab_instance",
                        sty.startTimeOption,
                        {
                          [sty.startTimeOptiondarkMode]: hasVariant(
                            $state,
                            "darkMode",
                            "darkMode"
                          )
                        }
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yQsgm,
                            {
                              [sty.textdarkMode__yQsgm9HcnI]: hasVariant(
                                $state,
                                "darkMode",
                                "darkMode"
                              )
                            }
                          )}
                        >
                          {"Start Time"}
                        </div>
                      }
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "startTimeOption",
                          "isSelected"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      value={"option2"}
                    />

                    <Checkbox
                      data-plasmic-name={"frequencyOption"}
                      data-plasmic-override={overrides.frequencyOption}
                      className={classNames(
                        "__wab_instance",
                        sty.frequencyOption
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mnVr6,
                            {
                              [sty.textdarkMode__mnVr69HcnI]: hasVariant(
                                $state,
                                "darkMode",
                                "darkMode"
                              )
                            }
                          )}
                        >
                          {"Frequency"}
                        </div>
                      }
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "frequencyOption",
                          "isSelected"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      value={"option3"}
                    />

                    <Checkbox
                      data-plasmic-name={"estimatedTimeOption"}
                      data-plasmic-override={overrides.estimatedTimeOption}
                      className={classNames(
                        "__wab_instance",
                        sty.estimatedTimeOption,
                        {
                          [sty.estimatedTimeOptiondarkMode]: hasVariant(
                            $state,
                            "darkMode",
                            "darkMode"
                          )
                        }
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tu9L0,
                            {
                              [sty.textdarkMode__tu9L09HcnI]: hasVariant(
                                $state,
                                "darkMode",
                                "darkMode"
                              )
                            }
                          )}
                        >
                          {"Estimated Time"}
                        </div>
                      }
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "estimatedTimeOption",
                          "isSelected"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                    />
                  </div>
                }
                showLabel={false}
              />
            </React.Fragment>
          }
          footer={
            <div
              data-plasmic-name={"editTaskCloseAndContinueButtons"}
              data-plasmic-override={overrides.editTaskCloseAndContinueButtons}
              className={classNames(
                projectcss.all,
                sty.editTaskCloseAndContinueButtons,
                {
                  [sty.editTaskCloseAndContinueButtonsdarkMode]: hasVariant(
                    $state,
                    "darkMode",
                    "darkMode"
                  )
                }
              )}
            >
              <Button
                data-plasmic-name={"editTaskCloseButton"}
                data-plasmic-override={overrides.editTaskCloseButton}
                className={classNames(
                  "__wab_instance",
                  sty.editTaskCloseButton,
                  {
                    [sty.editTaskCloseButtondarkMode]: hasVariant(
                      $state,
                      "darkMode",
                      "darkMode"
                    )
                  }
                )}
                color={"muted"}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lg9Et
                    )}
                  >
                    {"Close"}
                  </div>
                }
                onClick={async event => {
                  const $steps = {};

                  $steps["updateEditTask1IsOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["editTask1", "isOpen"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateEditTask1IsOpen"] != null &&
                    typeof $steps["updateEditTask1IsOpen"] === "object" &&
                    typeof $steps["updateEditTask1IsOpen"].then === "function"
                  ) {
                    $steps["updateEditTask1IsOpen"] = await $steps[
                      "updateEditTask1IsOpen"
                    ];
                  }
                }}
                type={"soft"}
              />

              <Button
                data-plasmic-name={"editTaskContinueButton"}
                data-plasmic-override={overrides.editTaskContinueButton}
                className={classNames(
                  "__wab_instance",
                  sty.editTaskContinueButton
                )}
                color={"success"}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__um2Zi
                    )}
                  >
                    {"Continue"}
                  </div>
                }
                onClick={async event => {
                  const $steps = {};

                  $steps["updateEditTask1IsOpen"] =
                    $state.editTaskCheckboxGroup.value > 0
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["editTask1", "isOpen"]
                            },
                            operation: 0,
                            value: ($state.editTask1.isOpen = false)
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["updateEditTask1IsOpen"] != null &&
                    typeof $steps["updateEditTask1IsOpen"] === "object" &&
                    typeof $steps["updateEditTask1IsOpen"].then === "function"
                  ) {
                    $steps["updateEditTask1IsOpen"] = await $steps[
                      "updateEditTask1IsOpen"
                    ];
                  }

                  $steps["updateEditTask2IsOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["editTask2", "isOpen"]
                          },
                          operation: 0,
                          value: ($state.editTask2.isOpen = true)
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateEditTask2IsOpen"] != null &&
                    typeof $steps["updateEditTask2IsOpen"] === "object" &&
                    typeof $steps["updateEditTask2IsOpen"].then === "function"
                  ) {
                    $steps["updateEditTask2IsOpen"] = await $steps[
                      "updateEditTask2IsOpen"
                    ];
                  }
                }}
                type={"soft"}
              />
            </div>
          }
          heading={
            <div
              data-plasmic-name={"editTaskLabelHolder"}
              data-plasmic-override={overrides.editTaskLabelHolder}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.editTaskLabelHolder,
                {
                  [sty.editTaskLabelHolderdarkMode]: hasVariant(
                    $state,
                    "darkMode",
                    "darkMode"
                  )
                }
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                {
                  <h3
                    data-plasmic-name={"h3"}
                    data-plasmic-override={overrides.h3}
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3
                    )}
                  >
                    {"Edit Task"}
                  </h3>
                }
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </div>
          }
          isOpen={generateStateValueProp($state, ["editTask1", "isOpen"])}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["editTask1", "isOpen"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          trigger={
            <Button
              data-plasmic-name={"editTaskButton"}
              data-plasmic-override={overrides.editTaskButton}
              className={classNames("__wab_instance", sty.editTaskButton, {
                [sty.editTaskButtondarkMode]: hasVariant(
                  $state,
                  "darkMode",
                  "darkMode"
                )
              })}
              iconStart={undefined}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dsKyk
                  )}
                >
                  {"Edit\nTask"}
                </div>
              }
              onClick={async event => {
                const $steps = {};
              }}
              roundedFull={true}
            />
          }
        />

        <Button
          data-plasmic-name={"deleteTaskButton"}
          data-plasmic-override={overrides.deleteTaskButton}
          className={classNames("__wab_instance", sty.deleteTaskButton, {
            [sty.deleteTaskButtondarkMode]: hasVariant(
              $state,
              "darkMode",
              "darkMode"
            )
          })}
          label={
            <div
              data-plasmic-name={"deleteTaskText"}
              data-plasmic-override={overrides.deleteTaskText}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.deleteTaskText
              )}
            >
              {"Delete\nTask"}
            </div>
          }
          onClick={async event => {
            const $steps = {};

            $steps["runCode"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return undefined;
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }
          }}
          roundedFull={true}
          submitsForm={false}
        />

        <Button
          data-plasmic-name={"premiumButton"}
          data-plasmic-override={overrides.premiumButton}
          className={classNames("__wab_instance", sty.premiumButton)}
          label={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__hVrKf
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $state.isPremium
                      ? "Premium\nFeatures"
                      : "Buy\nPremium";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Buy\nPremium";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          }
          onClick={async event => {
            const $steps = {};

            $steps["updateIsPremium"] = ($state.isPremium = false)
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["isPremium"]
                    },
                    operation: 4
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    const oldValue = $stateGet(objRoot, variablePath);
                    $stateSet(objRoot, variablePath, !oldValue);
                    return !oldValue;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateIsPremium"] != null &&
              typeof $steps["updateIsPremium"] === "object" &&
              typeof $steps["updateIsPremium"].then === "function"
            ) {
              $steps["updateIsPremium"] = await $steps["updateIsPremium"];
            }

            $steps["runCode"] = ($state.isPremium = true)
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return ($state.premiumModal.isOpen = true);
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }
          }}
          roundedFull={true}
          size={"extraLarge"}
          submitsForm={false}
        />

        <Modal
          data-plasmic-name={"premiumModal"}
          data-plasmic-override={overrides.premiumModal}
          className={classNames("__wab_instance", sty.premiumModal)}
          closeOnBackdropClick={false}
          content={
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__wwbHl)}
            >
              <Switch
                data-plasmic-name={"_switch"}
                data-plasmic-override={overrides._switch}
                className={classNames("__wab_instance", sty._switch)}
                disabled={false}
                isSelected={generateStateValueProp($state, [
                  "_switch",
                  "isSelected"
                ])}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ezf5S
                    )}
                  >
                    {"Disable AutoSchedule"}
                  </div>
                }
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "_switch",
                    "isSelected"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }

                  (async val => {
                    const $steps = {};

                    $steps["updateVariable"] = true
                      ? (() => {
                          const actionArgs = {
                            operation: 4,
                            variable: {
                              objRoot: $state,
                              variablePath: ["autoEnabled"]
                            }
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateVariable"] != null &&
                      typeof $steps["updateVariable"] === "object" &&
                      typeof $steps["updateVariable"].then === "function"
                    ) {
                      $steps["updateVariable"] = await $steps["updateVariable"];
                    }
                  }).apply(null, eventArgs);
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ylm0S
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <blockquote
                      data-plasmic-name={"blockquote"}
                      data-plasmic-override={overrides.blockquote}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.blockquote
                      )}
                    >
                      {
                        "Can't find what you need?\nEmail us at FocusFlowADHDApp@gmail.com!"
                      }
                    </blockquote>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>
            </Stack__>
          }
          heading={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___5ZtO8
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                {
                  <h4
                    className={classNames(
                      projectcss.all,
                      projectcss.h4,
                      projectcss.__wab_text,
                      sty.h4__oAyrH
                    )}
                  >
                    {"Premium Options"}
                  </h4>
                }
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </div>
          }
          isOpen={generateStateValueProp($state, ["premiumModal", "isOpen"])}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["premiumModal", "isOpen"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          trigger={null}
        />
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  lightMode: [
    "lightMode",
    "focusFlowTitle",
    "ownYourScheduleTagline",
    "calendar",
    "darkModeButton",
    "toggleMode",
    "addTask1",
    "addTaskButton",
    "addTaskLabel",
    "editTask2",
    "cmsDataFetcher",
    "continueButtonEditTask2",
    "addTaskBasicInfoTitleHolder",
    "addTaskBasicInfoTitle",
    "addTaskContentHolder",
    "basicInfoExplanation",
    "h6",
    "addTaskNameInputTextField",
    "addTaskRadioGroup",
    "addTaskFrequencySelection",
    "onceTrigger",
    "dailyTrigger",
    "weeklyTrigger",
    "monthlyTrigger",
    "cancelAddTaskButton",
    "addTaskGoToNextButton",
    "addTask2",
    "addTask2BodyHolder",
    "addTask2BodyTextHolder",
    "h5",
    "addTask2StartTimeSelectionHolder",
    "timeHhDropdown",
    "hourButton",
    "timeMmDropdown",
    "mmButton",
    "amPmDropdown",
    "addTask2EstimateHolder",
    "timeEstimate",
    "hhDropdown2",
    "hourButton2",
    "mmDropdown2",
    "mmButton2",
    "addTask2ButtonsHolder",
    "addTask2CancelButton",
    "addTask2FinishButton",
    "editTask1",
    "editTaskButton",
    "editTaskLabelHolder",
    "h3",
    "editTaskInfoStacker",
    "editTaskInfoHere",
    "editTaskCheckboxGroup",
    "editTaskInfoChecksHolder",
    "titleOption",
    "startTimeOption",
    "frequencyOption",
    "estimatedTimeOption",
    "editTaskCloseAndContinueButtons",
    "editTaskCloseButton",
    "editTaskContinueButton",
    "deleteTaskButton",
    "deleteTaskText",
    "premiumButton",
    "premiumModal",
    "_switch",
    "blockquote"
  ],
  focusFlowTitle: ["focusFlowTitle"],
  ownYourScheduleTagline: ["ownYourScheduleTagline"],
  calendar: ["calendar"],
  darkModeButton: ["darkModeButton", "toggleMode"],
  toggleMode: ["toggleMode"],
  addTask1: [
    "addTask1",
    "addTaskButton",
    "addTaskLabel",
    "editTask2",
    "cmsDataFetcher",
    "continueButtonEditTask2",
    "addTaskBasicInfoTitleHolder",
    "addTaskBasicInfoTitle",
    "addTaskContentHolder",
    "basicInfoExplanation",
    "h6",
    "addTaskNameInputTextField",
    "addTaskRadioGroup",
    "addTaskFrequencySelection",
    "onceTrigger",
    "dailyTrigger",
    "weeklyTrigger",
    "monthlyTrigger",
    "cancelAddTaskButton",
    "addTaskGoToNextButton"
  ],
  addTaskButton: [
    "addTaskButton",
    "addTaskLabel",
    "editTask2",
    "cmsDataFetcher",
    "continueButtonEditTask2"
  ],
  addTaskLabel: ["addTaskLabel"],
  editTask2: ["editTask2", "cmsDataFetcher", "continueButtonEditTask2"],
  cmsDataFetcher: ["cmsDataFetcher"],
  continueButtonEditTask2: ["continueButtonEditTask2"],
  addTaskBasicInfoTitleHolder: [
    "addTaskBasicInfoTitleHolder",
    "addTaskBasicInfoTitle"
  ],
  addTaskBasicInfoTitle: ["addTaskBasicInfoTitle"],
  addTaskContentHolder: [
    "addTaskContentHolder",
    "basicInfoExplanation",
    "h6",
    "addTaskNameInputTextField",
    "addTaskRadioGroup",
    "addTaskFrequencySelection",
    "onceTrigger",
    "dailyTrigger",
    "weeklyTrigger",
    "monthlyTrigger"
  ],
  basicInfoExplanation: ["basicInfoExplanation", "h6"],
  h6: ["h6"],
  addTaskNameInputTextField: ["addTaskNameInputTextField"],
  addTaskRadioGroup: [
    "addTaskRadioGroup",
    "addTaskFrequencySelection",
    "onceTrigger",
    "dailyTrigger",
    "weeklyTrigger",
    "monthlyTrigger"
  ],
  addTaskFrequencySelection: [
    "addTaskFrequencySelection",
    "onceTrigger",
    "dailyTrigger",
    "weeklyTrigger",
    "monthlyTrigger"
  ],
  onceTrigger: ["onceTrigger"],
  dailyTrigger: ["dailyTrigger"],
  weeklyTrigger: ["weeklyTrigger"],
  monthlyTrigger: ["monthlyTrigger"],
  cancelAddTaskButton: ["cancelAddTaskButton"],
  addTaskGoToNextButton: ["addTaskGoToNextButton"],
  addTask2: [
    "addTask2",
    "addTask2BodyHolder",
    "addTask2BodyTextHolder",
    "h5",
    "addTask2StartTimeSelectionHolder",
    "timeHhDropdown",
    "hourButton",
    "timeMmDropdown",
    "mmButton",
    "amPmDropdown",
    "addTask2EstimateHolder",
    "timeEstimate",
    "hhDropdown2",
    "hourButton2",
    "mmDropdown2",
    "mmButton2",
    "addTask2ButtonsHolder",
    "addTask2CancelButton",
    "addTask2FinishButton"
  ],
  addTask2BodyHolder: [
    "addTask2BodyHolder",
    "addTask2BodyTextHolder",
    "h5",
    "addTask2StartTimeSelectionHolder",
    "timeHhDropdown",
    "hourButton",
    "timeMmDropdown",
    "mmButton",
    "amPmDropdown",
    "addTask2EstimateHolder",
    "timeEstimate",
    "hhDropdown2",
    "hourButton2",
    "mmDropdown2",
    "mmButton2"
  ],
  addTask2BodyTextHolder: ["addTask2BodyTextHolder", "h5"],
  h5: ["h5"],
  addTask2StartTimeSelectionHolder: [
    "addTask2StartTimeSelectionHolder",
    "timeHhDropdown",
    "hourButton",
    "timeMmDropdown",
    "mmButton",
    "amPmDropdown"
  ],
  timeHhDropdown: ["timeHhDropdown", "hourButton"],
  hourButton: ["hourButton"],
  timeMmDropdown: ["timeMmDropdown", "mmButton"],
  mmButton: ["mmButton"],
  amPmDropdown: ["amPmDropdown"],
  addTask2EstimateHolder: [
    "addTask2EstimateHolder",
    "timeEstimate",
    "hhDropdown2",
    "hourButton2",
    "mmDropdown2",
    "mmButton2"
  ],
  timeEstimate: ["timeEstimate"],
  hhDropdown2: ["hhDropdown2", "hourButton2"],
  hourButton2: ["hourButton2"],
  mmDropdown2: ["mmDropdown2", "mmButton2"],
  mmButton2: ["mmButton2"],
  addTask2ButtonsHolder: [
    "addTask2ButtonsHolder",
    "addTask2CancelButton",
    "addTask2FinishButton"
  ],
  addTask2CancelButton: ["addTask2CancelButton"],
  addTask2FinishButton: ["addTask2FinishButton"],
  editTask1: [
    "editTask1",
    "editTaskButton",
    "editTaskLabelHolder",
    "h3",
    "editTaskInfoStacker",
    "editTaskInfoHere",
    "editTaskCheckboxGroup",
    "editTaskInfoChecksHolder",
    "titleOption",
    "startTimeOption",
    "frequencyOption",
    "estimatedTimeOption",
    "editTaskCloseAndContinueButtons",
    "editTaskCloseButton",
    "editTaskContinueButton"
  ],
  editTaskButton: ["editTaskButton"],
  editTaskLabelHolder: ["editTaskLabelHolder", "h3"],
  h3: ["h3"],
  editTaskInfoStacker: ["editTaskInfoStacker", "editTaskInfoHere"],
  editTaskInfoHere: ["editTaskInfoHere"],
  editTaskCheckboxGroup: [
    "editTaskCheckboxGroup",
    "editTaskInfoChecksHolder",
    "titleOption",
    "startTimeOption",
    "frequencyOption",
    "estimatedTimeOption"
  ],
  editTaskInfoChecksHolder: [
    "editTaskInfoChecksHolder",
    "titleOption",
    "startTimeOption",
    "frequencyOption",
    "estimatedTimeOption"
  ],
  titleOption: ["titleOption"],
  startTimeOption: ["startTimeOption"],
  frequencyOption: ["frequencyOption"],
  estimatedTimeOption: ["estimatedTimeOption"],
  editTaskCloseAndContinueButtons: [
    "editTaskCloseAndContinueButtons",
    "editTaskCloseButton",
    "editTaskContinueButton"
  ],
  editTaskCloseButton: ["editTaskCloseButton"],
  editTaskContinueButton: ["editTaskContinueButton"],
  deleteTaskButton: ["deleteTaskButton", "deleteTaskText"],
  deleteTaskText: ["deleteTaskText"],
  premiumButton: ["premiumButton"],
  premiumModal: ["premiumModal", "_switch", "blockquote"],
  _switch: ["_switch"],
  blockquote: ["blockquote"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  lightMode: "div";
  focusFlowTitle: "h1";
  ownYourScheduleTagline: "h2";
  calendar: typeof RichCalendar;
  darkModeButton: typeof Button;
  toggleMode: "div";
  addTask1: typeof Modal;
  addTaskButton: typeof Button;
  addTaskLabel: "div";
  editTask2: typeof Modal;
  cmsDataFetcher: typeof CmsQueryRepeater;
  continueButtonEditTask2: typeof Button;
  addTaskBasicInfoTitleHolder: "div";
  addTaskBasicInfoTitle: "h4";
  addTaskContentHolder: "div";
  basicInfoExplanation: "div";
  h6: "h6";
  addTaskNameInputTextField: typeof TextField;
  addTaskRadioGroup: typeof RadioGroup;
  addTaskFrequencySelection: "div";
  onceTrigger: typeof Radio;
  dailyTrigger: typeof Radio;
  weeklyTrigger: typeof Radio;
  monthlyTrigger: typeof Radio;
  cancelAddTaskButton: typeof Button;
  addTaskGoToNextButton: typeof Button;
  addTask2: typeof Modal;
  addTask2BodyHolder: "div";
  addTask2BodyTextHolder: "div";
  h5: "h5";
  addTask2StartTimeSelectionHolder: "div";
  timeHhDropdown: typeof AntdDropdown;
  hourButton: typeof AntdButton;
  timeMmDropdown: typeof AntdDropdown;
  mmButton: typeof AntdButton;
  amPmDropdown: typeof AntdDropdown;
  addTask2EstimateHolder: "div";
  timeEstimate: "div";
  hhDropdown2: typeof AntdDropdown;
  hourButton2: typeof AntdButton;
  mmDropdown2: typeof AntdDropdown;
  mmButton2: typeof AntdButton;
  addTask2ButtonsHolder: "div";
  addTask2CancelButton: typeof Button;
  addTask2FinishButton: typeof Button;
  editTask1: typeof Modal;
  editTaskButton: typeof Button;
  editTaskLabelHolder: "div";
  h3: "h3";
  editTaskInfoStacker: "div";
  editTaskInfoHere: "div";
  editTaskCheckboxGroup: typeof CheckboxGroup;
  editTaskInfoChecksHolder: "div";
  titleOption: typeof Checkbox;
  startTimeOption: typeof Checkbox;
  frequencyOption: typeof Checkbox;
  estimatedTimeOption: typeof Checkbox;
  editTaskCloseAndContinueButtons: "div";
  editTaskCloseButton: typeof Button;
  editTaskContinueButton: typeof Button;
  deleteTaskButton: typeof Button;
  deleteTaskText: "div";
  premiumButton: typeof Button;
  premiumModal: typeof Modal;
  _switch: typeof Switch;
  blockquote: "blockquote";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "lightMode") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("lightMode"),
  {
    // Helper components rendering sub-elements
    focusFlowTitle: makeNodeComponent("focusFlowTitle"),
    ownYourScheduleTagline: makeNodeComponent("ownYourScheduleTagline"),
    calendar: makeNodeComponent("calendar"),
    darkModeButton: makeNodeComponent("darkModeButton"),
    toggleMode: makeNodeComponent("toggleMode"),
    addTask1: makeNodeComponent("addTask1"),
    addTaskButton: makeNodeComponent("addTaskButton"),
    addTaskLabel: makeNodeComponent("addTaskLabel"),
    editTask2: makeNodeComponent("editTask2"),
    cmsDataFetcher: makeNodeComponent("cmsDataFetcher"),
    continueButtonEditTask2: makeNodeComponent("continueButtonEditTask2"),
    addTaskBasicInfoTitleHolder: makeNodeComponent(
      "addTaskBasicInfoTitleHolder"
    ),
    addTaskBasicInfoTitle: makeNodeComponent("addTaskBasicInfoTitle"),
    addTaskContentHolder: makeNodeComponent("addTaskContentHolder"),
    basicInfoExplanation: makeNodeComponent("basicInfoExplanation"),
    h6: makeNodeComponent("h6"),
    addTaskNameInputTextField: makeNodeComponent("addTaskNameInputTextField"),
    addTaskRadioGroup: makeNodeComponent("addTaskRadioGroup"),
    addTaskFrequencySelection: makeNodeComponent("addTaskFrequencySelection"),
    onceTrigger: makeNodeComponent("onceTrigger"),
    dailyTrigger: makeNodeComponent("dailyTrigger"),
    weeklyTrigger: makeNodeComponent("weeklyTrigger"),
    monthlyTrigger: makeNodeComponent("monthlyTrigger"),
    cancelAddTaskButton: makeNodeComponent("cancelAddTaskButton"),
    addTaskGoToNextButton: makeNodeComponent("addTaskGoToNextButton"),
    addTask2: makeNodeComponent("addTask2"),
    addTask2BodyHolder: makeNodeComponent("addTask2BodyHolder"),
    addTask2BodyTextHolder: makeNodeComponent("addTask2BodyTextHolder"),
    h5: makeNodeComponent("h5"),
    addTask2StartTimeSelectionHolder: makeNodeComponent(
      "addTask2StartTimeSelectionHolder"
    ),
    timeHhDropdown: makeNodeComponent("timeHhDropdown"),
    hourButton: makeNodeComponent("hourButton"),
    timeMmDropdown: makeNodeComponent("timeMmDropdown"),
    mmButton: makeNodeComponent("mmButton"),
    amPmDropdown: makeNodeComponent("amPmDropdown"),
    addTask2EstimateHolder: makeNodeComponent("addTask2EstimateHolder"),
    timeEstimate: makeNodeComponent("timeEstimate"),
    hhDropdown2: makeNodeComponent("hhDropdown2"),
    hourButton2: makeNodeComponent("hourButton2"),
    mmDropdown2: makeNodeComponent("mmDropdown2"),
    mmButton2: makeNodeComponent("mmButton2"),
    addTask2ButtonsHolder: makeNodeComponent("addTask2ButtonsHolder"),
    addTask2CancelButton: makeNodeComponent("addTask2CancelButton"),
    addTask2FinishButton: makeNodeComponent("addTask2FinishButton"),
    editTask1: makeNodeComponent("editTask1"),
    editTaskButton: makeNodeComponent("editTaskButton"),
    editTaskLabelHolder: makeNodeComponent("editTaskLabelHolder"),
    h3: makeNodeComponent("h3"),
    editTaskInfoStacker: makeNodeComponent("editTaskInfoStacker"),
    editTaskInfoHere: makeNodeComponent("editTaskInfoHere"),
    editTaskCheckboxGroup: makeNodeComponent("editTaskCheckboxGroup"),
    editTaskInfoChecksHolder: makeNodeComponent("editTaskInfoChecksHolder"),
    titleOption: makeNodeComponent("titleOption"),
    startTimeOption: makeNodeComponent("startTimeOption"),
    frequencyOption: makeNodeComponent("frequencyOption"),
    estimatedTimeOption: makeNodeComponent("estimatedTimeOption"),
    editTaskCloseAndContinueButtons: makeNodeComponent(
      "editTaskCloseAndContinueButtons"
    ),
    editTaskCloseButton: makeNodeComponent("editTaskCloseButton"),
    editTaskContinueButton: makeNodeComponent("editTaskContinueButton"),
    deleteTaskButton: makeNodeComponent("deleteTaskButton"),
    deleteTaskText: makeNodeComponent("deleteTaskText"),
    premiumButton: makeNodeComponent("premiumButton"),
    premiumModal: makeNodeComponent("premiumModal"),
    _switch: makeNodeComponent("_switch"),
    blockquote: makeNodeComponent("blockquote"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "FocusFlow",
      description: "",
      ogImageSrc: "",
      canonical: "http://localhost3000/focusflow.mysite.com"
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
